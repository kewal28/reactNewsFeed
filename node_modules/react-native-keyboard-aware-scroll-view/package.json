{
  "_args": [
    [
      {
        "raw": "react-native-keyboard-aware-scroll-view@0.8.0",
        "scope": null,
        "escapedName": "react-native-keyboard-aware-scroll-view",
        "name": "react-native-keyboard-aware-scroll-view",
        "rawSpec": "0.8.0",
        "spec": "0.8.0",
        "type": "version"
      },
      "/Volumes/Storage/react-native/reactNewsFeed/node_modules/native-base"
    ]
  ],
  "_from": "react-native-keyboard-aware-scroll-view@0.8.0",
  "_hasShrinkwrap": false,
  "_id": "react-native-keyboard-aware-scroll-view@0.8.0",
  "_location": "/react-native-keyboard-aware-scroll-view",
  "_nodeVersion": "10.13.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-keyboard-aware-scroll-view_0.8.0_1544430000472_0.04615731694141956"
  },
  "_npmUser": {
    "name": "alvaromb",
    "email": "me@alvaromb.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-keyboard-aware-scroll-view@0.8.0",
    "scope": null,
    "escapedName": "react-native-keyboard-aware-scroll-view",
    "name": "react-native-keyboard-aware-scroll-view",
    "rawSpec": "0.8.0",
    "spec": "0.8.0",
    "type": "version"
  },
  "_requiredBy": [
    "/native-base"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-keyboard-aware-scroll-view/-/react-native-keyboard-aware-scroll-view-0.8.0.tgz",
  "_shasum": "00bcaa38c91323913bb7a733059ad2bc4875f88c",
  "_shrinkwrap": null,
  "_spec": "react-native-keyboard-aware-scroll-view@0.8.0",
  "_where": "/Volumes/Storage/react-native/reactNewsFeed/node_modules/native-base",
  "author": {
    "name": "Alvaro Medina Ballester",
    "email": "me@alvaromb.com"
  },
  "bugs": {
    "url": "https://github.com/APSL/react-native-keyboard-aware-scroll-view/issues"
  },
  "dependencies": {
    "prop-types": "^15.6.2",
    "react-native-iphone-x-helper": "^1.0.3"
  },
  "description": "A React Native ScrollView component that resizes when the keyboard appears.",
  "devDependencies": {
    "babel-eslint": "^8.2.6",
    "eslint": "^5.4.0",
    "eslint-plugin-flowtype": "^2.50.0",
    "eslint-plugin-react": "^7.11.1",
    "eslint-plugin-react-native": "^3.2.1",
    "flow": "^0.2.3",
    "flow-bin": "^0.79.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-gPfhgHQI/z7Cc5aeNOEmK0b250QkAeU6V+4oH8EC7mmFneEKn6MAIDjpoiwqt6bV+lFJPABXfx9MtrRmtCeJ/Q==",
    "shasum": "00bcaa38c91323913bb7a733059ad2bc4875f88c",
    "tarball": "https://registry.npmjs.org/react-native-keyboard-aware-scroll-view/-/react-native-keyboard-aware-scroll-view-0.8.0.tgz",
    "fileCount": 16,
    "unpackedSize": 90945,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcDiGxCRA9TVsSAnZWagAAD8QQAIhUAyZuAM/VKv7m9p+5\nDAM3MSV6sTZp9YvgDRk5MEzafQudkRIHp2p6NbfpZIum0TuZGU2flD4CpnSj\nu3u2nTqMAZrv/QaYi7XQjKoL2hqFVfdlAXaqVqlI8XnMDGt8IGPbsvpYw9zD\njGuCC+dAPVkplUDmkanzYg3MgYr7oVLi8fej95m8WL+RkF7ou32giCpnIGT2\nTlgRA/CjgckJHQp+FQDwI9a6gW4VsGvackEZq+3JpdxxAqVlOqPgMa4FjWNW\n5paUh8ZAd40pks3P9jjlEonDQX+mkISHZF0MC65nx9pj33nd+9X1bxi9Z4Bt\nJaqxXSnsN4bpQIu/FkvH0cwvj497b/WZ6TPCCERMYT81erkrlKyM1MeRKN7V\nZJv1FSej7UXzPh8rsYa+SFrjZUsvJDjs77WLQYb4EhaXPkwhuZsDlK71aGYB\nSIAkAfAlT9iTBNG9eD+AvftD9IaDODn+tGxgQZMv5k6t2zkimrmYPfnNKCY8\nB8XydlPEMXc/ssav8GuPrrlMJ2uIC1UU6vMnzLmdQ6cc6Nqi3Hj9PgU4SdZ9\nX5K4VArq/Km4ujZPNcNL9g+scrImAUNL7d+hV2bI5wKLTjwPwx+JwSOnlHK8\nuEN4j3h8MSE3E7YkFEkI0Jmo6vSGq6VDCtnFdWfPGHwta/IKCqEY+rThvRi3\nlgn3\r\n=hlT6\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "62fd0d1383907f1a2b9a03ae4b0f1bdee4ac2e08",
  "homepage": "https://github.com/APSL/react-native-keyboard-aware-scroll-view#readme",
  "keywords": [
    "react",
    "react-native",
    "scrollview",
    "keyboard",
    "ios",
    "android",
    "react-component"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "alvaromb",
      "email": "me@alvaromb.com"
    }
  ],
  "name": "react-native-keyboard-aware-scroll-view",
  "optionalDependencies": {},
  "peerDependencies": {
    "react-native": ">=0.48.4"
  },
  "readme": "# react-native-keyboard-aware-scroll-view\n\n<p>\n<img src=\"https://travis-ci.org/APSL/react-native-keyboard-aware-scroll-view.svg?branch=master\" />\n<img src=\"https://img.shields.io/npm/dm/react-native-keyboard-aware-scroll-view.svg\" />\n<img src=\"https://img.shields.io/npm/dt/react-native-keyboard-aware-scroll-view.svg\" />\n</p>\n\nA ScrollView component that handles keyboard appearance and automatically scrolls to focused `TextInput`.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/wiki/APSL/react-native-keyboard-aware-scroll-view/kasv.gif\" alt=\"Scroll demo\" width=\"400\">\n</p>\n\n## Supported versions\n\n- `v0.4.0` requires `RN>=0.48`\n- `v0.2.0` requires `RN>=0.32.0`.\n- `v0.1.2` requires `RN>=0.27.2` but you should use `0.2.0` in order to make it work with multiple scroll views.\n- `v0.0.7` requires `react-native>=0.25.0`.\n- Use `v0.0.6` for older RN versions.\n\n## Installation\n\nInstallation can be done through `npm` or `yarn`:\n\n```shell\nnpm i react-native-keyboard-aware-scroll-view --save\n```\n\n```shell\nyarn add react-native-keyboard-aware-scroll-view\n```\n\n## Usage\n\nYou can use the `KeyboardAwareScrollView`, `KeyboardAwareSectionList` or the `KeyboardAwareFlatList`\ncomponents. They accept `ScrollView`, `SectionList` and `FlatList` default props respectively and\nimplement a custom high order componente called `KeyboardAwareHOC` to handle keyboard appearance.\nThe high order component is also available if you want to use it in any other component.\n\nImport `react-native-keyboard-aware-scroll-view` and wrap your content inside\nit:\n\n```js\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'\n```\n\n```jsx\n<KeyboardAwareScrollView>\n  <View>\n    <TextInput />\n  </View>\n</KeyboardAwareScrollView>\n```\n\n## Auto-scroll in `TextInput` fields\n\nAs of `v0.1.0`, the component auto scrolls to the focused `TextInput` 😎. For versions `v0.0.7` and older you can do the following.\n\n### Programatically scroll to any `TextInput`\n\nIn order to scroll to any `TextInput` field, you can use the built-in method `scrollToFocusedInput`. Example:\n\n```js\n_scrollToInput (reactNode: any) {\n  // Add a 'scroll' ref to your ScrollView\n  this.scroll.props.scrollToFocusedInput(reactNode)\n}\n```\n\n```jsx\n<KeyboardAwareScrollView\n  innerRef={ref => {\n    this.scroll = ref\n  }}>\n  <View>\n    <TextInput\n      onFocus={(event: Event) => {\n        // `bind` the function if you're using ES6 classes\n        this._scrollToInput(ReactNative.findNodeHandle(event.target))\n      }}\n    />\n  </View>\n</KeyboardAwareScrollView>\n```\n\n### Programatically scroll to any position\n\nThere's another built-in function that lets you programatically scroll to any position of the scroll view:\n\n```js\nthis.scroll.props.scrollToPosition(0, 0)\n```\n\n## Register to keyboard events\n\nYou can register to `ScrollViewResponder` events `onKeyboardWillShow` and `onKeyboardWillHide`:\n\n```jsx\n<KeyboardAwareScrollView\n  onKeyboardWillShow={(frames: Object) => {\n    console.log('Keyboard event', frames)\n  }}>\n  <View>\n    <TextInput />\n  </View>\n</KeyboardAwareScrollView>\n```\n\n## Android Support\n\nFirst, Android natively has this feature, you can easily enable it by setting `windowSoftInputMode` in `AndroidManifest.xml`. Check [here](https://developer.android.com/guide/topics/manifest/activity-element.html#wsoft).\n\nBut if you want to use feature like `extraHeight`, you need to enable Android Support with the following steps:\n\n- Make sure you are using react-native `0.46` or above.\n- Set `windowSoftInputMode` to `adjustPan` in `AndroidManifest.xml`.\n- Set `enableOnAndroid` property to `true`.\n\nAndroid Support is not perfect, here is the supported list:\n\n| **Prop**                    | **Android Support** |\n| --------------------------- | ------------------- |\n| `viewIsInsideTabBar`        | Yes                 |\n| `resetScrollToCoords`       | Yes                 |\n| `enableAutomaticScroll`     | Yes                 |\n| `extraHeight`               | Yes                 |\n| `extraScrollHeight`         | Yes                 |\n| `enableResetScrollToCoords` | Yes                 |\n| `keyboardOpeningTime`       | No                  |\n\n## API\n\n### Props\n\nAll the `ScrollView`/`FlatList` props will be passed.\n\n| **Prop**                    | **Type**                         | **Description**                                                                                |\n| --------------------------- | -------------------------------- | ---------------------------------------------------------------------------------------------- |\n| `innerRef`                  | `Function`                       | Catch the reference of the component.                                                          |\n| `viewIsInsideTabBar`        | `boolean`                        | Adds an extra offset that represents the `TabBarIOS` height.                                   |\n| `resetScrollToCoords`       | `Object: {x: number, y: number}` | Coordinates that will be used to reset the scroll when the keyboard hides.                     |\n| `enableAutomaticScroll`     | `boolean`                        | When focus in `TextInput` will scroll the position, default is enabled.                        |\n| `extraHeight`               | `number`                         | Adds an extra offset when focusing the `TextInput`s.                                           |\n| `extraScrollHeight`         | `number`                         | Adds an extra offset to the keyboard. Useful if you want to stick elements above the keyboard. |\n| `enableResetScrollToCoords` | `boolean`                        | Lets the user enable or disable automatic resetScrollToCoords.                                 |\n| `keyboardOpeningTime`       | `number`                         | Sets the delay time before scrolling to new position, default is 250                           |\n| `enableOnAndroid`           | `boolean`                        | Enable Android Support                                                                         |\n\n### Methods\n\nUse `innerRef` to get the component reference and use `this.scrollRef.props` to access these methods.\n\n| **Method**           | **Parameter**                                                                                                                                           | **Description**                                                |\n| -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------- |\n| `getScrollResponder` | `void`                                                                                                                                                  | Get `ScrollResponder`                                          |\n| `scrollToPosition`   | `x: number, y: number, animated: bool = true`                                                                                                           | Scroll to specific position with or without animation.         |\n| `scrollToEnd`        | `animated?: bool = true`                                                                                                                                | Scroll to end with or without animation.                       |\n| `scrollIntoView`     | `element: React.Element<*>, options: { getScrollPosition: ?(parentLayout, childLayout, contentOffset) => { x: number, y: number, animated: boolean } }` | Scrolls an element inside a KeyboardAwareScrollView into view. |\n\n### Using high order component\n\nEnabling any component to be keyboard-aware is very easy. Take a look at the code of `KeyboardAwareFlatList`:\n\n```js\n/* @flow */\n\nimport { FlatList } from 'react-native'\nimport listenToKeyboardEvents from './KeyboardAwareHOC'\n\nexport default listenToKeyboardEvents(FlatList)\n```\n\nThe HOC can also be configured. Sometimes it's more convenient to provide a static config than configuring the behavior with props. This HOC config can be overriden with props.\n\n```js\n/* @flow */\n\nimport { FlatList } from 'react-native'\nimport listenToKeyboardEvents from './KeyboardAwareHOC'\n\nconst config = {\n  enableOnAndroid: true,\n  enableAutomaticScroll: true\n}\n\nexport default listenToKeyboardEvents(config)(FlatList)\n```\n\nThe available config options are:\n\n```js\n{\n  enableOnAndroid: boolean,\n  contentContainerStyle: ?Object,\n  enableAutomaticScroll: boolean,\n  extraHeight: number,\n  extraScrollHeight: number,\n  enableResetScrollToCoords: boolean,\n  keyboardOpeningTime: number,\n  viewIsInsideTabBar: boolean,\n  refPropName: string,\n  extractNativeRef: Function\n}\n```\n\n## License\n\nMIT.\n\n## Author\n\nÁlvaro Medina Ballester `<amedina at apsl.net>`\n\nBuilt with 💛 by [APSL](https://github.com/apsl).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/APSL/react-native-keyboard-aware-scroll-view.git"
  },
  "scripts": {
    "flow": "flow check",
    "lint": "eslint lib",
    "test": "npm run lint"
  },
  "tags": [
    "react",
    "react-native",
    "react-component",
    "ios",
    "android"
  ],
  "types": "index.d.ts",
  "version": "0.8.0"
}
